{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from scipy import stats\n",
    "import scipy.stats as ss"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задача:\\\n",
    "\n",
    "У вас есть несколько ресторанов в разных частях города и целый штат курьеров. Но есть одна проблема — к вечеру скорость доставки падает из-за того, что курьеры уходят домой после рабочего дня, а количество заказов лишь растет. Это приводит к тому, что в момент пересмены наша доставка очень сильно проседает в эффективности. \n",
    "\n",
    "Наши data scientist-ы придумали новый алгоритм, который позволяет курьерам запланировать свои последние заказы перед окончанием рабочего дня так, чтобы их маршрут доставки совпадал с маршрутом до дома. То есть, чтобы курьеры доставляли последние свои заказы за день как бы \"по пути\" домой. \n",
    "\n",
    "Вы вместе с командой решили раскатить A/B тест на две равные группы курьеров. Часть курьеров использует старый алгоритм без опции \"по пути\", другие видят в своем приложении эту опцию и могут ее выбрать. Ваша задача – проанализировать данные эксперимента и помочь бизнесу принять решение о раскатке новой фичи на всех курьеров."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('/mnt/HC_Volume_18315164/home-jupyter/jupyter-j-postnova/experiment_lesson_4.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>delivery_time</th>\n",
       "      <th>district</th>\n",
       "      <th>experiment_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3159</td>\n",
       "      <td>44.0</td>\n",
       "      <td>Purlieus</td>\n",
       "      <td>control</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10426</td>\n",
       "      <td>51.0</td>\n",
       "      <td>Purlieus</td>\n",
       "      <td>control</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9155</td>\n",
       "      <td>46.0</td>\n",
       "      <td>Purlieus</td>\n",
       "      <td>control</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10699</td>\n",
       "      <td>34.0</td>\n",
       "      <td>Purlieus</td>\n",
       "      <td>control</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10061</td>\n",
       "      <td>43.0</td>\n",
       "      <td>Purlieus</td>\n",
       "      <td>control</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20191</th>\n",
       "      <td>14561</td>\n",
       "      <td>42.0</td>\n",
       "      <td>Suburb</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20192</th>\n",
       "      <td>12015</td>\n",
       "      <td>32.0</td>\n",
       "      <td>Suburb</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20193</th>\n",
       "      <td>20077</td>\n",
       "      <td>23.0</td>\n",
       "      <td>Purlieus</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20194</th>\n",
       "      <td>14861</td>\n",
       "      <td>41.0</td>\n",
       "      <td>Central</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20195</th>\n",
       "      <td>13501</td>\n",
       "      <td>41.0</td>\n",
       "      <td>Central</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20196 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       order_id  delivery_time  district experiment_group\n",
       "0          3159           44.0  Purlieus          control\n",
       "1         10426           51.0  Purlieus          control\n",
       "2          9155           46.0  Purlieus          control\n",
       "3         10699           34.0  Purlieus          control\n",
       "4         10061           43.0  Purlieus          control\n",
       "...         ...            ...       ...              ...\n",
       "20191     14561           42.0    Suburb             test\n",
       "20192     12015           32.0    Suburb             test\n",
       "20193     20077           23.0  Purlieus             test\n",
       "20194     14861           41.0   Central             test\n",
       "20195     13501           41.0   Central             test\n",
       "\n",
       "[20196 rows x 4 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для начала сформулируем гипотезы для проверки. \\\n",
    "Нулевая гипотеза (H0): Разницы между средним временем доставки в тестовой и контрольной группе нет\\\n",
    "Альтернативная гипотеза (H1): Разница между средним временем доставки в тестовой и контрольной группе есть\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#построим гистограммы распредления времени доставки по районам в контрольной и в тестовой группе"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "district\n",
       "Central     AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "Purlieus    AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "Suburb      AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "Name: delivery_time, dtype: object"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.query(\"experiment_group == 'control'\").groupby('district')['delivery_time'].hist(bins=100)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "district\n",
       "Central     AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "Purlieus    AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "Suburb      AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "Name: delivery_time, dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.query(\"experiment_group == 'test'\").groupby('district')['delivery_time'].hist(bins=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#предварительно по графикам видны различия по времени доставки в разных районах, "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверим выполнение условий на нормальность и посчитаем стандартное отклонение в тесте и в контроле.\n",
    "Делаем семплирование перед применением критерия при проверке на нормальность (и для теста, и для контроля), так как на больших выборках вы можете получать неверные результаты: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.stats import shapiro"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.9975479245185852, pvalue=0.14013493061065674)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shapiro(df[df['experiment_group'] == 'test']['delivery_time'].sample(1000, random_state=17))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.9974725842475891, pvalue=0.12411931157112122)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shapiro(df[df['experiment_group'] == 'control']['delivery_time'].sample(1000, random_state=17))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для того, чтобы проверить нормальность распределения, я использую \n",
    "SHAPIRO-WILK TEST. \\\n",
    "Этот тест показывает, что значения в тестовой группе распределены НОРМАЛЬНО\\\n",
    "В контрольной группе распределение является НОРМАЛЬНЫМ\\\n",
    "Стандартное отклонение времени доставки в тесте равно (округлите до сотых) 9.88\\\n",
    "Стандартное отклонение времени доставки в контроле равно (округлите до сотых) 9.99"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для сравнения средних в данных экспериментальных группах я использую \n",
    "STUDENT'S T-TEST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=43.03582663183714, pvalue=0.0)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ss.ttest_ind(df[df['experiment_group'] == 'control']['delivery_time'], df[df['experiment_group'] == 'test']['delivery_time'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ". Статистика в тесте равна -43, p-value <= 0.05, "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "На сколько процентов изменилось среднее время доставки в тестовой группе по сравнению с контрольной?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "45.065101070154576"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c = df[df['experiment_group'] == 'control']['delivery_time'].mean()\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "39.04681314330958"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t = df[df['experiment_group'] == 'test']['delivery_time'].mean()\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13.35"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round (100 - t*100/c,2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Что в итоге? Используем новую версию? Да, раскатываем новый алгоритм на всех, так как среднее время доставки статистически значимо изменилось. Среднее время доставки в тесте меньше, чем в контроле."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
